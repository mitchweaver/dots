# ▛▀▖      ▌        
# ▌ ▌▞▀▖▞▀▖▌▗▘▞▀▖▙▀▖
# ▌ ▌▌ ▌▌ ▖▛▚ ▛▀ ▌  
# ▀▀ ▝▀ ▝▀ ▘ ▘▝▀▘▘  
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

command -v docker >/dev/null || return

# have all below run as root with clean environment

case $(uname) in
    Darwin)
        if command -v colima >/dev/null ; then
            alias docker='sudo env -i /opt/homebrew/bin/docker'
            alias docker-compose='sudo env -i /opt/homebrew/bin/docker-compose'
        else
            return
        fi
        ;;
    Linux)
        alias docker='sudo env -i docker'
        alias docker-compose='sudo env -i docker-compose'
esac

# list images/containers
alias {dli,dlsi}='docker images'
alias {dlc,dlsc}='docker container ls -a'

# rm images/containers
alias {drmi,dirm}='docker image rm'
alias {drmc,dcrm}='docker container rm'

alias {dst,dstop}='docker stop'
alias drun='docker run'
alias {drunr,drunrm}='docker run --rm'
alias dps='docker ps'

alias dlogs='docker logs'
alias dexec='docker exec'
alias dshell='docker exec -it /bin/sh'

dprune() {
    docker image prune
    docker volume rm $(docker volume ls -f dangling=true -q)
}

# compose
alias cup='compose up --abort-on-container-exit'
alias cdown='compose down'
alias cbuild='compose build'

dbuild() {
    [ "$1" ] || { >&2 'Usage: dbuild <tag>' ; return 1 ; }
    docker build --tag "$1" .
}

docker_remove_networks() {
    docker network ls | awk '$3 == "bridge" && $2 != "bridge" { print $1 }'
}

dockerkillall() {
    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
}

DOCKER_NUKE() {
    printf 'This will delete all images and containers, confirm? (y/n): '
    read -r ans
    [ "$ans" = y ] && {
        docker rm $(docker ps -a -q) --force
        docker rmi $(docker images -q) --force
        docker_remove_networks
    }
}
