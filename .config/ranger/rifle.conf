# vim: ft=cfg

# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files

# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | $DISPLAY is not empty (i.e. Xorg runs)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

# Define the "editor" for text files as first action
mime ^text,  label editor = nvim -- "$@"
mime ^text,  label pager  = $PAGER -- "$@"
!mime ^text, label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php = nvim -- "$@"
!mime ^text, label pager,  ext xml|json|csv|tex|py|pl|rb|js|sh|php = "$PAGER" -- "$@"
ext 1                         = man "$1"

mime ^audio|ogg|opus|flac|mp3|wav|aac$, terminal = pkill mpv ; mpv --really-quiet --no-video -- "$@"

# Video/Audio with a GUI
#-------------------------------------------
#mime ^video,       has mpv,      X, flag f = mpv -- "$@"
#mime ^video,       has mpv,      X, flag f = mpv --fs -- "$@"
mime ^video,       has mpv,      X, flag f = mpv --loop -- "$@"

#-------------------------------------------
# Documents
#-------------------------------------------
ext epub, flag f = open "$@"
ext pdf, flag f = open "$@"

ext docx?, has catdoc,       terminal = catdoc -- "$@" | "$PAGER"
ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm, has libreoffice, flag f = libreoffice "$@"
ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm, has soffice, flag f = soffice "$@"

#-------------------------------------------
# Image Viewing:
#-------------------------------------------
mime ^image/gif,           flag f = mpvimg "$@"
mime ^image,               flag f = mpvimg "$@"
ext JPG?,                  flag f = mpvimg "$@"
ext PNG?,                  flag f = mpvimg "$@"

# Fallback:
#ext tar|gz, has tar = tar -xvzpf "$@"
#ext tar|bz2, has tar = tar -xvjpf "$@"
#ext tar|xz, has tar = tar -xvJpf "$@"

#-------------------------------------------
# Misc
#-------------------------------------------

# if not recognized, last resort open with editor
!mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php  = nvim -- "$@"

label editor, !mime ^text, !ext conf|txt|xml|json|csv|tex|py|pl|rb|js|sh|php  = nvim -- "$@"
label pager,  !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php|  = "$PAGER" -- "$@"
