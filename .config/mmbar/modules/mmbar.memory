#!/bin/sh

get_memory() {

    case $OS in
        OpenBSD)

# shellcheck disable=2034
read -r _ _ real _ _ free _ cache _ swap <<EOF
$(top -n | grep Memory)
EOF

            # real is displayed as "real"/"real+cache"
            # we just want to output "real", dont care about
            # amount used as cached
            real=${real%/*}
            # total="$(( ${real%M} + ${free%M} + ${cache%M}))"

            printf '%s %s\n' '' "$real"
            ;;


        ## Get memory information by parsing /proc/meminfo.
        ## Idea from pfetch, (dylan)
        ##
        ## Formula: MemUsed = MemTotal + Shmem - MemFree - Buffers - Cached - SReclaimable
        ## Source: https://github.com/KittyKatt/screenFetch/issues/386
        Linux)
            # Parse the '/proc/meminfo' file splitting on ':' and 'k'.
            # The format of the file is 'key:   000kB' and an additional
            # split is used on 'k' to filter out 'kB'.
            while IFS=':k ' read -r key val _ ; do
                case $key in
                    MemTotal|Shmem) used=$((used + val)) ;;
                    MemFree|Buffers|Cached|SReclaimable) used=$((used - val))
                esac
            done </proc/meminfo

            printf ' %s' "$(printf '%s\n' "$((used * 1024))" | "$BAR_HOME"/utils/human)"
    esac

}
