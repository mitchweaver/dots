# ============================================================
COMMON_FLAGS_HARDENING=""
# ============================================================

# Explicitly forbid execution on the stack.
# see: http://linux.die.net/man/8/execstack
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -Wl,-z,noexecstack"

# Add stack canaries to functions.
#
# * protector: add to functions gcc believes to be vulnerable
# * protector-strong: add to all functions with arrays larger than 4 bytes
# * protector-all: add to ALL functions, regardless of arrays
#
# note: 'all' is generally considered a waste.
# see: http://wiki.osdev.org/Stack_Smashing_Protector
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -fstack-protector-strong"

# Prevent stack clash attacks.
# see: http://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -fstack-clash-protection"

# Check that target addresses are valid before changing flow control.
# Helps protect against ROP attacks.
#
# * branch: only branching
# * return: only returns
# * full: both
#
# see: http://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -fcf-protection=full"

# Full Read-Only Relocation
#
# * disable lazy library binding
# * makes shared libraries read-only after ASLR relocation
# * '-z,now', ("full" RELRO), marks entire Global Offset Table as read-only
# * prevents an attacker from gaining execution control through the GOT
#
# see: http://redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro
# see: http://tk-blog.blogspot.com/2009/02/relro-not-so-well-known-memory.html
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -Wl,-z,relro,-z,now"

# Reject undefined symbols at link time and forbid underlinking.
# Many attacks rely on taking control of these undefined symbols.
#
# This also allows you to see errors during the build
# rather than pushing a bug to occur at run time.
#
# see: http://bugzilla.mozilla.org/show_bug.cgi?id=333640
# see: http://wiki.rosalab.ru/ru/index.php/Underlinking#Why_underlinking_is_bad
#
# NOTE: this seems to break a few python packages, looking into
#       pycairo/numpy so far failing to link if this is enabled
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -Wl,-z,defs"

# Enable buffer overflow checks.
# see: http://access.redhat.com/blogs/766093/posts/1976213
#
# note: this causes a few packages to fail compile
#       see env/no-fortify-source.conf
COMMON_FLAGS_HARDENING="$COMMON_FLAGS_HARDENING -D_FORTIFY_SOURCE=2"

# Enable bounds checking for strings as well as null pointer checks.
# see: http://gcc.gnu.org/onlinedocs/libstdc++/manual/using_macros.html
CXXFLAGS="$CXXFLAGS -D_GLIBCXX_ASSERTIONS"

# vim:ft=config
